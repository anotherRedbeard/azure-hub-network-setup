name: Deploy Azure Hub Network

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: dev
      action:
        description: 'Deployment action'
        required: true
        type: choice
        options:
          - deploy
          - validate
          - what-if
          - extract-vpn
        default: validate

permissions:
  id-token: write
  contents: read

env:
  AZURE_REGION: canadacentral

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.ENTRA_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Bicep templates
        if: github.event.inputs.action == 'validate' || github.event.inputs.action == 'deploy'
        run: |
          echo "Validating Bicep templates..."
          az bicep build --file ./infra/bicep/main.bicep

      - name: Run What-If deployment
        if: github.event.inputs.action == 'what-if' || github.event.inputs.action == 'deploy'
        run: |
          echo "Running What-If deployment..."
          az deployment sub what-if \
            --location ${{ env.AZURE_REGION }} \
            --parameters ./infra/bicep/main.${{ github.event.inputs.environment }}.bicepparam \
            --parameters tenantId=${{ secrets.ENTRA_TENANT_ID }}

      - name: Deploy infrastructure
        if: github.event.inputs.action == 'deploy'
        id: deploy
        run: |
          echo "Deploying infrastructure..."
          az deployment sub create \
            --location ${{ env.AZURE_REGION }} \
            --parameters ./infra/bicep/main.${{ github.event.inputs.environment }}.bicepparam \
            --parameters tenantId=${{ secrets.ENTRA_TENANT_ID }} \
            --name "hub-network-${{ github.event.inputs.environment }}-$(date +%Y%m%d-%H%M%S)" \
            --output json > deployment-output.json
          
          cat deployment-output.json

      - name: Extract VPN Configuration
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'extract-vpn'
        id: vpn-config
        run: |
          if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
            # For deploy action, extract resource group from deployment output and pass to script
            RESOURCE_GROUP_NAME=$(jq -r '.properties.outputs.resourceGroupName.value' deployment-output.json)
            echo "Using resource group from deployment: $RESOURCE_GROUP_NAME"
            ./scripts/extract-vpn-config.sh -e ${{ github.event.inputs.environment }} -g "$RESOURCE_GROUP_NAME"
          else
            # For extract-vpn action, use default naming convention
            ./scripts/extract-vpn-config.sh -e ${{ github.event.inputs.environment }}
          fi
          
          # Extract resource details for GitHub Actions outputs
          if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
            # For deploy action, get values from deployment output
            VPN_GATEWAY_NAME=$(jq -r '.properties.outputs.vpnGatewayName.value' deployment-output.json)
            VPN_GATEWAY_PUBLIC_IP=$(jq -r '.properties.outputs.vpnGatewayPublicIp.value' deployment-output.json)
            VNET_NAME=$(jq -r '.properties.outputs.vnetName.value' deployment-output.json)
            DNS_RESOLVER_INBOUND_IP=$(jq -r '.properties.outputs.dnsResolverInboundEndpointIp.value' deployment-output.json)
            DNS_SERVER_IP=$(echo $DNS_RESOLVER_INBOUND_IP | sed 's/.*\///')
          else
            # For extract-vpn action, parse values from script output or resource lookup
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            RESOURCE_GROUP_NAME="auto-${ENVIRONMENT}-hub-network-rg"
            VPN_GATEWAY_NAME="auto-hub-${ENVIRONMENT}-vpngw"
            VNET_NAME="auto-hub-${ENVIRONMENT}-vnet"
            
            # Get values from Azure resources
            VPN_GATEWAY_INFO=$(az network vnet-gateway show --resource-group "$RESOURCE_GROUP_NAME" --name "$VPN_GATEWAY_NAME" --output json)
            VPN_GATEWAY_PUBLIC_IP_ID=$(echo "$VPN_GATEWAY_INFO" | jq -r '.ipConfigurations[0].publicIPAddress.id')
            VPN_GATEWAY_PUBLIC_IP=$(az network public-ip show --ids "$VPN_GATEWAY_PUBLIC_IP_ID" --query ipAddress --output tsv)
            
            DNS_RESOLVER_INBOUND_ENDPOINTS=$(az dns-resolver inbound-endpoint list --resource-group "$RESOURCE_GROUP_NAME" --dns-resolver-name "auto-hub-${ENVIRONMENT}-dnspr" --output json)
            DNS_SERVER_IP=$(echo "$DNS_RESOLVER_INBOUND_ENDPOINTS" | jq -r '.[0].ipConfigurations[0].privateIpAddress')
          fi
          
          # Save to GitHub Actions outputs
          echo "vpn_gateway_name=$VPN_GATEWAY_NAME" >> $GITHUB_OUTPUT
          echo "vpn_gateway_public_ip=$VPN_GATEWAY_PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
          echo "vnet_name=$VNET_NAME" >> $GITHUB_OUTPUT
          echo "dns_resolver_inbound_ip=$DNS_SERVER_IP" >> $GITHUB_OUTPUT

      - name: Upload VPN Configuration
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'extract-vpn'
        uses: actions/upload-artifact@v4
        with:
          name: vpn-configuration-${{ github.event.inputs.environment }}
          path: |
            ./output/vpn-configuration.txt
            ./output/azurevpnconfig.xml
            ./output/azure-hub-vpn-${{ github.event.inputs.environment }}.ovpn
          retention-days: 90

      - name: Summary
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'extract-vpn'
        run: |
          echo "## Deployment Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Group | ${{ steps.vpn-config.outputs.resource_group_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Virtual Network | ${{ steps.vpn-config.outputs.vnet_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| VPN Gateway | ${{ steps.vpn-config.outputs.vpn_gateway_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| VPN Gateway Public IP | ${{ steps.vpn-config.outputs.vpn_gateway_public_ip }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DNS Resolver Inbound IP | ${{ steps.vpn-config.outputs.dns_resolver_inbound_ip }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### VPN Configuration ðŸ“„" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The VPN configuration has been uploaded as an artifact." >> $GITHUB_STEP_SUMMARY
          echo "Download it from the workflow run artifacts section." >> $GITHUB_STEP_SUMMARY
